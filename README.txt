# CDD ‚Äî Hub de Estudos (Streamlit)

Centraliza seus estudos de Ci√™ncia de Dados: **per√≠odos do curso**, **grade de estudos**, **checklist**, **to-do**, **anota√ß√µes**, mini **Data Lab**, **ML Demo** e **ferramentas de PDF**.
Arquitetado para ser f√°cil de manter: `app.py` apenas roteia; utilidades ficam em `core/` e componentes visuais em `components/`.

---

## üîß Instala√ß√£o & Execu√ß√£o

### 1) Criar venv e instalar

```bash
# Windows (PowerShell)
python -m venv .venv
.\.venv\Scripts\Activate.ps1
python -m pip install -r requirements.txt

# Linux/Mac
python -m venv .venv
source .venv/bin/activate
pip install -r requirements.txt
```

### 2) Executar

```bash
python -m streamlit run app.py
```

### 3) Persist√™ncia (arquivos locais)

* `storage/cdd_state.json`: metas, checklists e to-do
* `storage/notes.md`: anota√ß√µes
* `storage/todos.json`: export/import manual de tarefas
* `periodos/periodos_curso.json`: **fonte de verdade** da organiza√ß√£o por per√≠odos

> Dica: versionar `periodos/periodos_curso.json` e manter `storage/` no `.gitignore` (dados pessoais).

---

## üß≠ P√°ginas (views)

* **Resumo (Vis√£o geral)** ‚Äî vis√£o geral do hub
* **Fundamentos (Conceitos e teoria)** ‚Äî anota√ß√µes/links base
* **Ferramentas (Ambientes e bibliotecas)** ‚Äî setup e refer√™ncias
* **Grade de Estudos** ‚Äî trilha pr√°tica por m√≥dulos, entreg√°veis e progresso
* **Per√≠odos do Curso** ‚Äî organiza√ß√£o por per√≠odo/disciplinas, pr√©-reqs, materiais e notas
* **Data Lab** ‚Äî espa√ßo para mini-experimentos
* **ML Demo** ‚Äî demo de ML com `scikit-learn` (imports pesados carregam s√≥ nesta p√°gina)
* **Checklist** ‚Äî checagens estruturadas
* **To-do** ‚Äî tarefas pessoais
* **Anota√ß√µes** ‚Äî caderno r√°pido (`storage/notes.md`)
* **PDF Tools** ‚Äî utilit√°rios (ex.: PDF ‚Üí CSV/XLSX; imports pesados locais)

> A navega√ß√£o √© categorizada na sidebar. O **app.py s√≥ roteia**, nada de l√≥gica pesada nele.

---

## üóÇÔ∏è Estrutura do projeto

```
cdd/
‚îú‚îÄ app.py                    # roteador (menu + import din√¢mico da view)
‚îú‚îÄ core/
‚îÇ  ‚îú‚îÄ state.py               # estado (session/persist√™ncia) e helpers
‚îÇ  ‚îú‚îÄ paths.py               # caminhos e cria√ß√£o de pastas
‚îÇ  ‚îú‚îÄ io.py                  # utilit√°rios de I/O (read_json, write_json, to_int, to_str)
‚îÇ  ‚îî‚îÄ adapters.py            # convers√µes (ex.: per√≠odos ‚áÑ grade)
‚îú‚îÄ components/
‚îÇ  ‚îú‚îÄ ui.py                  # componentes visuais reutiliz√°veis (legendas/cards)
‚îÇ  ‚îî‚îÄ widgets.py             # (opcional) inputs customizados
‚îú‚îÄ views/
‚îÇ  ‚îú‚îÄ periodos.py            # Per√≠odos do Curso
‚îÇ  ‚îú‚îÄ grade.py               # Grade de Estudos
‚îÇ  ‚îú‚îÄ checklist.py           # Checklist
‚îÇ  ‚îú‚îÄ notes.py               # Anota√ß√µes
‚îÇ  ‚îú‚îÄ pdf_tools.py           # PDF ‚Üí CSV/XLSX (imports pesados dentro de page())
‚îÇ  ‚îî‚îÄ ...                    # demais p√°ginas
‚îú‚îÄ periodos/
‚îÇ  ‚îî‚îÄ periodos_curso.json    # fonte de verdade
‚îú‚îÄ data/
‚îÇ  ‚îî‚îÄ seeds/
‚îÇ     ‚îî‚îÄ periodos_seed.json  # exemplo/seed inicial
‚îú‚îÄ storage/
‚îÇ  ‚îú‚îÄ cdd_state.json         # estado persistido do usu√°rio
‚îÇ  ‚îî‚îÄ notes.md               # anota√ß√µes
‚îî‚îÄ assets/
   ‚îî‚îÄ styles.css             # (opcional) CSS
```

---

## üß± Conven√ß√µes & Boas Pr√°ticas

* **`app.py` √© s√≥ roteador**: `st.set_page_config`, carrega estado (`load_state`), monta sidebar e faz `import_module(...).page()`.
* **Infra**:

  * `core/state.py`: `ss_get`, `ss_set`, `ss_pop`, `load_state`, `save_state`, `ensure_check_state`.
  * **Sem UI** (nada de `st.markdown()` ou `expander`) dentro de `core/`.
* **Caminhos**: `core/paths.py` define `ROOT`, `ASSETS`, `STORAGE`, `PERIODOS_DIR`, `PERIODOS_JSON`, `SEEDS`.
* **I/O**: `core/io.py` centraliza `read_json()`, `write_json()`, `to_int()`, `to_str()`.
* **Componentes visuais**: `components/ui.py` (ex.: `render_legenda_academica(where="sidebar"|"main")`, `tile(title, body, tags=None)`).
* **Views**: cada arquivo em `views/` implementa **apenas** a l√≥gica daquela p√°gina e exp√µe `page()`.

  * **Imports pesados** (ex.: `sklearn`, `tabula`) **dentro** de `page()` da view correspondente.

---

## üîÅ Sincroniza√ß√£o Grade ‚áÑ Per√≠odos

* **Fonte de verdade acad√™mica**: `periodos/periodos_curso.json`.
* Para refletir conte√∫dos de **Per√≠odos** na **Grade**, use um adapter em `core/adapters.py`:

  * `periodos_to_grade(periodos_dict) -> grade_dict/list`
* Na `views/grade.py`, carregue com:

  ```python
  from core.io import read_json
  from core.paths import PERIODOS_JSON
  from core.adapters import periodos_to_grade

  obj = read_json(PERIODOS_JSON) or {}
  grade = periodos_to_grade(obj.get("periodos", {}))
  ```
* **Onde colocar materiais?**
  Coloque **links/materiais por disciplina** em **Per√≠odos** (mais natural e reus√°vel).
  A **Grade** pode exibir um resumo agregando esses links via adapter.

---

## üß™ PDF ‚Üí CSV/XLSX (opcional)

A p√°gina `views/pdf_tools.py` traz mini-ferramentas. Para PDF com tabelas:

* Use `tabula-py` (requer Java) **ou** `camelot` (PDFs ‚Äúdigitais‚Äù, n√£o escaneados).
* Instale apenas se for usar:

  ```bash
  pip install tabula-py  # (requer Java instalado)
  # ou
  pip install camelot-py[cv]
  ```

---

## üÜò Troubleshooting

* **`cannot import name X from core.state`**
  Verifique se a fun√ß√£o existe e o nome est√° igual; evite import circular.
* **`RecursionError` em `load_state`**
  Garanta que `load_state()` **n√£o chama** `load_state()` novamente (sem loops).
* **`module 'datetime' has no attribute 'dt'`**
  Use `import datetime as dt` e chame `dt.datetime.now()`.
* **`ValueError: cannot convert float NaN to integer`**
  Use conversores seguros (`to_int`, `to_str`) ao importar CSVs.
* **Imports pesados deixando o app lento**
  Mova `sklearn`, `tabula`, etc. **para dentro da fun√ß√£o `page()`** da view que usa.

---

## üöÄ Roadmap curto

* [ ] Adapter **per√≠odos ‚Üí grade** (e opcionalmente grade ‚Üí per√≠odos).
* [ ] Melhorar `components/ui.py` com cards/metrics reutiliz√°veis.
* [ ] Adicionar exporta√ß√µes convenientes (JSON/MD) padronizadas nas p√°ginas.
* [ ] Testes leves de fun√ß√µes em `core/`.

---

## üìå Comandos √∫teis (Windows PowerShell)

```powershell
.\.venv\Scripts\Activate.ps1
python -m pip install -r requirements.txt
python -m streamlit run app.py
```

---

**Licen√ßa**: pessoal/educacional (ajuste conforme seu uso).
**Issues/Sugest√µes**: abra um issue no reposit√≥rio.

---
